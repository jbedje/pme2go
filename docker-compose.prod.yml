version: '3.8'

services:
  # PME2GO API Service
  api:
    build: .
    container_name: pme2go-api
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-pme2go}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      
      # Email Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_SECURE=${SMTP_SECURE:-false}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL}
      - FROM_NAME=${FROM_NAME:-PME2GO}
      
      # Application Configuration
      - NODE_ENV=production
      - PORT=3004
      - FRONTEND_URL=${FRONTEND_URL:-https://pme2go.com}
      - API_BASE_URL=${API_BASE_URL:-https://api.pme2go.com}
      
      # Backup Configuration
      - BACKUP_DIR=/app/backups
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - BACKUP_COMPRESSION_LEVEL=${BACKUP_COMPRESSION_LEVEL:-6}
      
      # Performance Configuration
      - PERFORMANCE_ALERTS_ENABLED=${PERFORMANCE_ALERTS_ENABLED:-true}
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-10mb}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-15}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
    
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./uploads:/app/uploads
      - ./data:/app/data
    
    depends_on:
      - postgres
      - redis
    
    networks:
      - pme2go-network
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.pme2go.com`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pme2go-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-pme2go}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS="--auth-host=scram-sha-256"
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    
    ports:
      - "5432:5432"
    
    networks:
      - pme2go-network
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-pme2go}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pme2go-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - pme2go-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: pme2go-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/certs
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
    networks:
      - pme2go-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: pme2go-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pme2go-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: pme2go-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - pme2go-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  pme2go-network:
    driver: bridge