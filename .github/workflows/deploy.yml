name: Deploy PME2GO to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: docker.io
  IMAGE_NAME: pme2go

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pme2go_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint --if-present

    - name: Run tests
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: pme2go_test
        DB_USER: postgres
        DB_PASSWORD: postgres

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        GENERATE_SOURCEMAP: false

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USER }}
        key: ${{ secrets.PROD_SSH_KEY }}
        port: ${{ secrets.PROD_PORT || 22 }}
        script: |
          # Navigate to application directory
          cd /opt/pme2go
          
          # Pull latest Docker image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Update environment file
          cat > .env.production << EOF
          NODE_ENV=production
          PORT=3001
          SERVER_PORT=3002
          WEBSOCKET_PORT=3005
          
          # Database
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_SSL=true
          
          # Security
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
          
          # URLs
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          REACT_APP_WS_URL=${{ secrets.REACT_APP_WS_URL }}
          REACT_APP_FRONTEND_URL=${{ secrets.REACT_APP_FRONTEND_URL }}
          
          # External Services
          REDIS_URL=${{ secrets.REDIS_URL }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          EOF
          
          # Stop existing containers
          docker-compose -f docker-compose.prod.yml down || true
          
          # Start new containers
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to start..."
          sleep 30
          
          # Check application health
          curl -f http://localhost:3002/api/health || exit 1
          
          # Clean up old Docker images
          docker system prune -f
          
          echo "✅ Deployment completed successfully!"

  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "✅ Deployment successful!"
          # Add notification webhook here (Slack, Discord, etc.)
        else
          echo "❌ Deployment failed!"
          exit 1
        fi